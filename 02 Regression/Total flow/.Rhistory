library(pbapply)
library(parallel)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
log_flow <- log(full_tab$tot_in + full_tab$tot_out)    # in + out
uni_score <- full_tab$uni_score
countries <- full_tab$Country
##################
# visualize results
x11()
plot(uni_score, log_flow, main='Total flow vs Uni Score')
##################################################################################
# MIXED GAUSSIAN KERNEL & KNN LOCAL LINEAR REGRESSION
# NUMBER OF NEIGHBORS SELECTION WITH CROSS-VALIDATION ON LS
# direcly select number of neighbors
k <- 5
# select span
n <- length(log_flow)
span <- 0.05
k <- as.integer(span*n)
mod.knn <- npreg(log_flow ~ uni_score, bwtype='adaptive_nn', bwmethod="cv.ls", ckertype = 'gaussian')
summary(mod.knn)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.knn, newdata = data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'KNN regression')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
# number of neighbors
mod.knn$bw
# RMSE
sqrt(mod.knn$MSE)
############################################################################################
# I find RMSE and optimal span with CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE.knn <- function(curr.bws, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
mod.curr <- npreg(log_flow ~ uni_score, bwtype='adaptive_nn', ckertype = 'gaussian', bws=curr.bws, data = curr_data)
RMSE[i] <- sqrt(mean((predict(mod.curr, newdata=curr_miss) - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of nearest neighbors search
neigh.grid <- seq(1, ceiling(n/2), by=1)
span.grid <- neigh.grid/n
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE.knn", "kfolds"))
RMSE_wrapper <- function(curr.bws){find.RMSE.knn(curr.bws, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(neigh.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.neigh <- neigh.grid[which.min(all_RMSE)]
opt.neigh
opt.span <- opt.neigh/n
opt.span
min(all_RMSE)
x11()
plot(span.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs span')
abline(v=opt.span, col='red', lwd=2)
#########################################################################################
# MIXED GAUSSIAN KERNEL & KNN LOCAL LINEAR REGRESSION WITH OPTIMAL NUMBER OF NEIGHBORS
mod.knn.opt <- npreg(log_flow ~ uni_score, ckertype = 'gaussian', bws=opt.neigh, bwtype='adaptive_nn')
summary(mod.knn)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.knn.opt, newdata = data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Gaussian kernel regression')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
# RMSE
sqrt(mod.knn.opt$MSE)
rm(list=ls())
library(car)
library(ISLR2)
library(np)
library(splines)
library(fda)
library(pbapply)
library(parallel)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
log_flow <- log(full_tab$tot_in + full_tab$tot_out)    # in + out
uni_score <- full_tab$uni_score
countries <- full_tab$Country
##################
# visualize results
x11()
plot(uni_score, log_flow, main='Total flow vs Uni Score')
###############################################################
# SMOOTHING CUBIC B-SPLINES
# SELECT OPTIMAL LAMBDA WITH CROSS-VALIDATION
fit.s.spline.loocv <- smooth.spline(uni_score, log_flow, cv=T)
fit.s.spline.gcv <- smooth.spline(uni_score, log_flow, cv=F)
x11()
plot(uni_score, log_flow, main = 'Smoothing cubic splines')
lines(fit.s.spline.loocv, col='red', lwd=2)
#lines(fit.s.spline.gcv, col='blue', lwd=2)
legend('bottomright', legend = c('LOOCV', 'GCV'), fill = c('red', 'blue'))
############################################################################################
# I find RMSE and optimal span with CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE <- function(curr.lam, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
mod.curr <- smooth.spline(curr_data$uni_score, curr_data$log_flow, lambda = curr.lam)
RMSE[i] <- sqrt(mean((predict(mod.curr, curr_miss$uni_score)$y - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of dof search
lam.grid <- seq(1e-7, 1e-3, by=1e-7)
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE", "kfolds", "smooth.spline"))
RMSE_wrapper <- function(curr.lam){find.RMSE(curr.lam, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(lam.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.lam <- lam.grid[which.min(all_RMSE)]
opt.lam
min(all_RMSE)
x11()
plot(lam.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs span')
abline(v=opt.lam, col='red', lwd=2)
#######################################################################################
# SMOOTHING CUBIC B-SPLINES WITH OPTIMAAL LAMBDA
fit.smooth.opt <- smooth.spline(uni_score, log_flow, lambda = opt.lam)
x11()
plot(uni_score, log_flow, main = 'Smoothing cubic splines')
lines(fit.smooth.opt, col='red', lwd=2)
points(fit.smooth.opt$x, fit.smooth.opt$y, pch='x', col='blue')
RMSE <- sqrt(mean((predict(fit.smooth.opt, uni_score)$y- log_flow)^2))
RMSE
rm(list=ls())
library(car)
library(ISLR2)
library(np)
library(splines)
library(fda)
library(pbapply)
library(parallel)
#################
# load data
full_tab <- read.csv('full_tab_31_10_21.csv')
flow <- full_tab$tot_in - full_tab$tot_out    # in - out
flow.norm <- flow / full_tab$num_ric
countries <- full_tab$Country
Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)])
x11()
pairs(Z)
##################################################################
# do PCA on the regressors
tab <- Z[,-1]
# standardized data
tab.std <- data.frame(scale(tab))
# PCA
pca.std <- princomp(tab.std, scores = T)
print(summary(pca.std))
# collect scores of first PCA
scores.pc1  <- pca.std$scores[,1]
# remove NA (identified previous script)
flow.norm[4] <- NA    # tolgo Cipro
flow.norm[19] <- NA    # tolgo Lussemburgo
flow.norm <- flow.norm[-c(4,19)]
scores.pc1 <- scores.pc1[-c(4,19)]
#######################################################################################
# NATURAL CUBIC B-SPLINES
# SET KNOTS ACCORDING TO EVENLY SPACED QUANTILES
# number of knots
n_knots <- 3
int.knots <- quantile(scores.pc1, seq(0, 1, length.out=n_knots+2))[3:(n_knots)]
ext.knots <- quantile(scores.pc1, seq(0, 1, length.out=n_knots+2))[c(2, n_knots+1)]
mod.nat.spline.3 <- lm(flow.norm ~ ns(scores.pc1, knots = int.knots, Boundary.knots = ext.knots))
summary(mod.nat.spline.3)
x11()
par(mfrow=c(2,2))
plot(mod.nat.spline.3)
shapiro.test(mod.nat.spline.3$residuals)
# I plot fitted values +- 2 * standard errors)
xx <- seq(min(scores.pc1), max(scores.pc1), length.out = 1000)
preds <- predict(mod.nat.spline.3, data.frame(scores.pc1 = xx), se.fit=T)
x11()
plot(scores.pc1, flow.norm, main = 'Natural Cubic splines')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
abline(v=c(int.knots, ext.knots), lty=2, col='gray')
############################################################################################
# I find RMSE and optimal span with CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(flow.norm=flow.norm, scores.pc1 = scores.pc1)
kfolds <- quantile_kfold(n_fold, data.fr, 'scores.pc1')
# function to find RMSE for a certain bandwidth
find.RMSE <- function(curr.knots, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
int.knots <- quantile(curr_data$scores.pc1, seq(0, 1, length.out=curr.knots+2))[3:(curr.knots)]
ext.knots <- quantile(curr_data$scores.pc1, seq(0, 1, length.out=curr.knots+2))[c(2, curr.knots+1)]
mod.curr <- lm(flow.norm ~ ns(scores.pc1, knots = int.knots, Boundary.knots = ext.knots), data = curr_data)
RMSE[i] <- sqrt(mean((predict(mod.curr, newdata=curr_miss) - curr_miss$flow.norm)^2))
}
return(mean(RMSE))
}
# set the grid of dof search
knots.grid <- seq(3, 20, by=1)
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE", "kfolds", "ns"))
RMSE_wrapper <- function(curr.knots){find.RMSE(curr.knots, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(knots.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.knots <- knots.grid[which.min(all_RMSE)]
opt.knots
min(all_RMSE)
x11()
plot(knots.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs span')
abline(v=opt.knots, col='red', lwd=2)
#######################################################################################
# NATURAL CUBIC B-SPLINES WITH OPTIMAL DOF
int.knots <- quantile(scores.pc1, seq(0, 1, length.out=opt.knots+2))[3:(opt.knots)]
ext.knots <- quantile(scores.pc1, seq(0, 1, length.out=opt.knots+2))[c(2, opt.knots+1)]
mod.nat.3.opt <- lm(flow.norm ~ ns(scores.pc1, knots = int.knots, Boundary.knots = ext.knots))
summary(mod.nat.3.opt)
x11()
par(mfrow=c(2,2))
plot(mod.nat.3.opt)
shapiro.test(mod.nat.3.opt$residuals)
# I plot fitted values +- 2 * standard errors)
xx <- seq(min(scores.pc1), max(scores.pc1), length.out = 1000)
preds <- predict(mod.nat.3.opt, data.frame(scores.pc1 = xx), se.fit=T)
x11()
plot(scores.pc1, flow.norm, main = 'Natural Cubic splines')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
abline(v=c(int.knots, ext.knots), lty=2, col='gray')
RMSE <- sqrt(mean((mod.nat.3.opt$residuals)^2))
RMSE
rm(list=ls())
library(ISLR2)
library(car)
library(mgcv)
library(rgl)
library(splines)
library(pbapply)
#################
# load data (I normalize the covariates)
full_tab <- read.csv('full_tab_31_10_21.csv')
flow <- full_tab$tot_in - full_tab$tot_out    # in - out
flow.norm <- flow / full_tab$num_ric
countries <- full_tab$Country
#tab <- data.frame(flow.norm, scale(full_tab[, c(4,6,8,17)]))
tab <- data.frame(flow.norm, full_tab[, c(4,6,8,17)])
# remove NA (Cipro e Lussemburgo)
tab <- tab[-c(4,19),]
x11()
scatterplotMatrix(tab)
################################################################################
# MULTIVARIATE LINEAR MODEL
mod.lin <- lm(flow.norm ~ ., data = tab)             # without interaction
summary(mod.lin)
x11()
par(mfrow=c(2,2))
plot(mod.lin)
shapiro.test(mod.lin$residuals)
################################################################################
# GAM WITH SMOOTHING CUBIC SPLINES
mod.gam <- gam(flow.norm ~ stud_per_staff +
s(Citations.per.document, bs='cr') +
s(Reasearch, bs='cr') +
s(uni_score_norm, bs='cr'), data = tab)
summary(mod.gam)
# diagnostic
x11()
par(mfrow=c(2,2))
boxplot(mod.gam$residuals, main='Boxplot of residuals')
plot(mod.gam$fitted.values, mod.gam$residuals, main='Residuals vs fitted values')
abline(h=0, col='red')
hist(mod.gam$residuals, breaks = 10, col = 'gray', main = 'Histogramof residuals')
qqnorm(mod.gam$residuals)
qqline(mod.gam$residuals, col='red')
shapiro.test(mod.gam$residuals)
# check the contribution of each regressor to the response
x11()
par(mfrow=c(1,3))
plot(mod.gam)
rm(list=ls())
library(ISLR2)
library(car)
library(mgcv)
library(rgl)
library(splines)
library(pbapply)
#################
# load data
full_tab <- read.csv('full_tab_31_10_21.csv')
flow <- full_tab$tot_in - full_tab$tot_out    # in - out
flow.norm <- flow / full_tab$num_ric
countries <- full_tab$Country
Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)])
##################################################################
# do PCA on the regressors
tab <- Z[,-1]
# standardized data
tab.std <- data.frame(scale(tab))
# PCA
pca.std <- princomp(tab.std, scores = T)
print(summary(pca.std))
# collect scores of first PCA
scores.pc1  <- pca.std$scores[,1]
scores.pc2  <- pca.std$scores[,2]
scores.pc3  <- pca.std$scores[,3]
tab <- data.frame(flow.norm=flow.norm,
scores.pc1=scores.pc1,
scores.pc2=scores.pc2,
scores.pc3=scores.pc3)
# remove NA (Cipro e Lussemburgo)
tab <- tab[-c(4,19),]
################################################################################
# MULTIVARIATE LINEAR MODEL
mod.lin <- lm(flow.norm ~ ., data = tab)             # without interaction
summary(mod.lin)
x11()
par(mfrow=c(2,2))
plot(mod.lin)
shapiro.test(mod.lin$residuals)
################################################################################
# GAM WITH SMOOTHING CUBIC SPLINES
mod.gam <- gam(flow.norm ~ s(scores.pc1, bs='cr') + s(scores.pc2, bs='cr')+ s(scores.pc3, bs='cr'), data = tab)
summary(mod.gam)
# diagnostic
x11()
par(mfrow=c(2,2))
boxplot(mod.gam$residuals, main='Boxplot of residuals')
plot(mod.gam$fitted.values, mod.gam$residuals, main='Residuals vs fitted values')
abline(h=0, col='red')
hist(mod.gam$residuals, breaks = 10, col = 'gray', main = 'Histogram of residuals')
qqnorm(mod.gam$residuals)
qqline(mod.gam$residuals, col='red')
shapiro.test(mod.gam$residuals)
# check the contribution of each regressor to the response
x11()
par(mfrow=c(1,3))
plot(mod.gam)
mod.gam <- gam(flow.norm ~ scores.pc1 + scores.pc2+ s(scores.pc3, bs='cr'), data = tab)
summary(mod.gam)
# diagnostic
x11()
par(mfrow=c(2,2))
boxplot(mod.gam$residuals, main='Boxplot of residuals')
plot(mod.gam$fitted.values, mod.gam$residuals, main='Residuals vs fitted values')
abline(h=0, col='red')
hist(mod.gam$residuals, breaks = 10, col = 'gray', main = 'Histogram of residuals')
qqnorm(mod.gam$residuals)
qqline(mod.gam$residuals, col='red')
shapiro.test(mod.gam$residuals)
# check the contribution of each regressor to the response
x11()
par(mfrow=c(1,3))
plot(mod.gam)
rm(list=ls())
library(car)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
flow <- full_tab$tot_in - full_tab$tot_out    # in - out
flow.norm <- flow / full_tab$num_ric
pat <- log(full_tab$Patent.applications..nonresidents + full_tab$Patent.applications..residents)
#Z <- data.frame(flow, full_tab[, c(4,6,8,17)])
Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)])
#Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)], pat=pat)
countries <- full_tab$Country
##################
# visualize results
x11()
pairs(Z)
##########################################################################################
# perform PCA on the regressors
tab <- Z[,-1]
x11()
par(mfrow=c(1,2))
boxplot(scale(tab, center = T, scale = F), main='Boxplot of original data')
barplot(sapply(tab, sd)^2, las=2, main='Original Data Variables')
# very significant difference among covariates, better to normalize them
tab.std <- data.frame(scale(tab))
x11()
boxplot(tab.std, main = 'Boxplot of standardized data')
# I do PCA
pca.std<- princomp(tab.std, scores = T)
print(summary(pca.std))
# visualize PCA performances
x11()
par(mfrow=c(1,3))
boxplot(pca.std$scores, main = "Boxplot of PCA data")
barplot(pca.std$sdev^2/sum(pca.std$sdev^2), ylim = c(0,1), main = "Proportional variances of PCA data")
plot(cumsum(pca.std$sdev^2)/sum(pca.std$sdev^2), ylim = c(0,1), type = "b", main = "Cumulate variance of PCA data")
abline(h=0.8, col = 'red')
# study of loadings
load.pca.std <- pca.std$loadings[,1:4]
x11()
par(mfrow=c(1,2))
barplot(load.pca.std [,1], ylim=c(-1, 1), main = 'PC1 loadings', las=2)   #evidence on variables 1,3,4 , contrast with 2
barplot(load.pca.std [,2], ylim=c(-1, 1), main = 'PC2 loadings', las=2)   #evidence on variable 2
mod.gam <- gam(flow.norm ~ scores.pc1 + scores.pc2, data = tab)
summary(mod.gam)
rm(list=ls())
library(ISLR2)
library(car)
library(mgcv)
library(rgl)
library(splines)
library(pbapply)
#################
# load data
full_tab <- read.csv('full_tab_31_10_21.csv')
flow <- full_tab$tot_in - full_tab$tot_out    # in - out
flow.norm <- flow / full_tab$num_ric
countries <- full_tab$Country
Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)])
##################################################################
# do PCA on the regressors
tab <- Z[,-1]
# standardized data
tab.std <- data.frame(scale(tab))
# PCA
pca.std <- princomp(tab.std, scores = T)
print(summary(pca.std))
# collect scores of first PCA
scores.pc1  <- pca.std$scores[,1]
scores.pc2  <- pca.std$scores[,2]
scores.pc3  <- pca.std$scores[,3]
tab <- data.frame(flow.norm=flow.norm,
scores.pc1=scores.pc1,
scores.pc2=scores.pc2,
scores.pc3=scores.pc3)
# remove NA (Cipro e Lussemburgo)
tab <- tab[-c(4,19),]
################################################################################
# MULTIVARIATE LINEAR MODEL
mod.lin <- lm(flow.norm ~ ., data = tab)             # without interaction
summary(mod.lin)
x11()
par(mfrow=c(2,2))
plot(mod.lin)
shapiro.test(mod.lin$residuals)
################################################################################
# GAM WITH SMOOTHING CUBIC SPLINES
mod.gam <- gam(flow.norm ~ s(scores.pc1, bs='cr') + s(scores.pc2, bs='cr')+ s(scores.pc3, bs='cr'), data = tab)
summary(mod.gam)
mod.gam <- gam(flow.norm ~ scores.pc1 + scores.pc2, data = tab)
summary(mod.gam)
# diagnostic
x11()
par(mfrow=c(2,2))
boxplot(mod.gam$residuals, main='Boxplot of residuals')
plot(mod.gam$fitted.values, mod.gam$residuals, main='Residuals vs fitted values')
abline(h=0, col='red')
hist(mod.gam$residuals, breaks = 10, col = 'gray', main = 'Histogram of residuals')
qqnorm(mod.gam$residuals)
qqline(mod.gam$residuals, col='red')
shapiro.test(mod.gam$residuals)
# check the contribution of each regressor to the response
x11()
par(mfrow=c(1,3))
plot(mod.gam)
mod.gam <- gam(flow.norm ~ s(scores.pc1, bs='cr') + s(scores.pc2, bs='cr'), data = tab)
summary(mod.gam)
# diagnostic
x11()
par(mfrow=c(2,2))
boxplot(mod.gam$residuals, main='Boxplot of residuals')
plot(mod.gam$fitted.values, mod.gam$residuals, main='Residuals vs fitted values')
abline(h=0, col='red')
hist(mod.gam$residuals, breaks = 10, col = 'gray', main = 'Histogram of residuals')
qqnorm(mod.gam$residuals)
qqline(mod.gam$residuals, col='red')
shapiro.test(mod.gam$residuals)
# check the contribution of each regressor to the response
x11()
par(mfrow=c(1,3))
plot(mod.gam)
