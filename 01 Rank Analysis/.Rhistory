######################################################################################
#DEPTH MEASURES
tukey_depth <- depth(u=tab, method='Tukey')    #find depth measure according to Tukey method
hist(tukey_depth, breaks = 20)
#find the median (point with highest depth)
tab.median <- depthMedian(tab, depth_params = list(method='Tukey'))
x11()
pairs(rbind(tab, tab.median),
pch = c(rep(19, dim(tab)[1]),8),
col = c(rep('black', dim(tab)[1]), 'red'),
cex = c(rep(1, dim(tab)[1]),2))
x11()
bagplot.pairs(tab)
#find the outliers according to bagplot
tab.out <- bagplot.pairs(tab)$pxy.outlier
tab.out
x11()
bagplot.pairs(tab)
#find the outliers according to bagplot
out <- c()
#find the outliers according to bagplot
outliers <- c()
for(i in 1:4){
for(j in (i+1):5){
outliers <- c(outliers, bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier)
}
}
outliers
help("bagplot")
i = 1
j = 2
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
tab[,c(i,j)] == pxy_out
whcih(tab[,c(i,j)] == pxy_out)
which(tab[,c(i,j)] == pxy_out)
which(tab[,c(i,j)] == pxy_out)
which((tab[,c(i,j)] == pxy_out))
(tab[,c(i,j)] == pxy_out)
(tab[,c(i,j)] == pxy_out)[,1]
(tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2]
#find the outliers according to bagplot
outliers <- c()
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
outliers <- c(outliers, which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2]))
}
}
outliers
i = 1
j = 2
which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
(tab[,c(i,j)] == pxy_out)[,1]
pxy_out
pxy_out == NULL
#find the outliers according to bagplot
outliers <- c()
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outliers <- c(outliers, which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2]))
}else{
outliers <- c(outliers, 'NA')
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- c()
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(col_names[i], col_names[j], outl)
}else{
outliers <- c(outliers, 'NA')
}
}
}
outliers
col_names
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- c()
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(cbind(col_names[i], col_names[j], outl))
}else{
outliers <- c(outliers, 'NA')
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- c()
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(cbind(col_names[i], col_names[j], outl))
}else{
outliers <- rbind(cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
i = 1
j = 2
outliers <- NULL
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outl
cbind(col_names[i], col_names[j], outl)
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], outl))
}else{
outliers <- rbind(cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], outl))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], countries[outl]))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
countries <- full_tab$Country
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], countries[outl]))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
outl
i = 1
j = 2
which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
rm(list=ls())
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
set.seed(1234)
###################################################
# LOAD DATA
full_tab <- read.csv('full_tab_31_10_21.csv')
pat <- full_tab$Patent.applications..nonresidents + full_tab$Patent.applications..residents
tab <- data.frame(full_tab[, c(4,6,8,17)], pat=log(pat))
countries <- full_tab$Country
######################################################################################
#DEPTH MEASURES
tukey_depth <- depth(u=tab, method='Tukey')    #find depth measure according to Tukey method
hist(tukey_depth, breaks = 20)
#find the median (point with highest depth)
tab.median <- depthMedian(tab, depth_params = list(method='Tukey'))
x11()
pairs(rbind(tab, tab.median),
pch = c(rep(19, dim(tab)[1]),8),
col = c(rep('black', dim(tab)[1]), 'red'),
cex = c(rep(1, dim(tab)[1]),2))
#########################################################################################
#BAGPLOT AND OUTLIER IDENTIFICATION
x11()
bagplot.pairs(tab)
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], countries[outl]))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
i = 1
j = 2
which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outl
countries[outl]
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
1:4
i = 1
(i+1):5
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
old_count
i = 1
j = 2
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
out_count
outl
View(tab)
flow <- full_tab$tot_in - full_tab$tot_out    # in - out
flow.norm <- flow / full_tab$num_ric
pat <- log(full_tab$Patent.applications..nonresidents + full_tab$Patent.applications..residents)
#Z <- data.frame(flow, full_tab[, c(4,6,8,17)])
#Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)])
Z <- data.frame(flow.norm, full_tab[, c(4,6,8,17)], pat=pat)
countries <- full_tab$Country
##########################################################################################
# perform PCA on the regressors
tab <- Z[,-1]
x11()
par(mfrow=c(1,2))
boxplot(scale(tab, center = T, scale = F), main='Boxplot of original data')
barplot(sapply(tab, sd)^2, las=2, main='Original Data Variables')
# very significant difference among covariates, better to normalize them
tab.std <- data.frame(scale(tab))
x11()
boxplot(tab.std, main = 'Boxplot of standardized data')
# I do PCA
pca.std<- princomp(tab.std, scores = T)
print(summary(pca.std))
# visualize PCA performances
x11()
par(mfrow=c(1,3))
boxplot(pca.std$scores, main = "Boxplot of PCA data")
barplot(pca.std$sdev^2/sum(pca.std$sdev^2), ylim = c(0,1), main = "Proportional variances of PCA data")
plot(cumsum(pca.std$sdev^2)/sum(pca.std$sdev^2), ylim = c(0,1), type = "b", main = "Cumulate variance of PCA data")
abline(h=0.8, col = 'red')
# study of loadings
load.pca.std <- pca.std$loadings[,1:4]
x11()
par(mfrow=c(1,2))
barplot(load.pca.std [,1], ylim=c(-1, 1), main = 'PC1 loadings', las=2)   #evidence on variables 1,3,4 , contrast with 2
barplot(load.pca.std [,2], ylim=c(-1, 1), main = 'PC2 loadings', las=2)   #evidence on variable 2
# collect scores of first PCA
scores.pc1  <- pca.std$scores[,1]
x11()
par(mfrow=c(1,2))
plot(scores.pc1, flow, main = "Flow vs pca")
plot(scores.pc1, flow.norm, main = "Flow norm vs pca")
###################################################################################
# LINEAR REGRESSION ON FLOW
mod <- lm(flow ~ scores.pc1)
summary(mod)
x11()
par(mfrow=c(2,2))
plot(mod)
shapiro.test(mod$residuals)
x11()
b <- mod$coefficients
xx = seq(min(scores.pc1), max(scores.pc1), length = 100)
plot(scores.pc1, flow, main = "Flow vs pca")
lines(xx, b[1] + b[2]*xx, col='red')
#################################################################################
# LINEAR REGRESSION ON NORMALIZED FLOW
# remove outliers (4 Cipro e 19 Lussemburgo)
flow.norm <- flow.norm[-c(4,19)]
scores.pc1 <- scores.pc1[-c(4,19)]
mod.norm <- lm(flow.norm ~ scores.pc1)   # è il migliore
summary(mod.norm)
x11()
par(mfrow=c(2,2))
plot(mod.norm)
shapiro.test(mod.norm$residuals)
x11()
b <- mod.norm$coefficients
xx = seq(min(scores.pc1), max(scores.pc1), length = 100)
plot(scores.pc1, flow.norm, main = "Normalized Flow vs pca")
lines(xx, b[1] + b[2]*xx, col='red')
RMSE <- sqrt(mean(mod.norm$fitted.values^2))
RMSE
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
count = 0
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
count = count + 1
}
}
outliers
count
i
j
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
outl
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
pxy_out
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
out_count
outl
tab[,c(i,j)]
diff(2,3)
abs
abs(2-3)
tab[,c(i,j)] - pxy_out
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
tab[,c(i,j)] - pxy_out
pxy_out
tab[,c(i,j)]
tab[,c(i,j)] - 1
tab[,c(i,j)] - cbind(1,1)
tab[,c(i,j)] - cbind(1,2)
tab[,c(i,j)] - tab[,c(i,j)][,1]
tab[,c(i,j)] - tab[,c(i,j)][1,]
tab[,c(i,j)][1,]
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] - pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
outl <- which((tab[,c(i,j)] == pxy_out)[,1] & (tab[,c(i,j)] == pxy_out)[,2])
out_count <- countries[outl]
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
apply(tab[,c(i,j)], MARGIN = 1, FUN = functionm)
apply(tab[,c(i,j)], MARGIN = 1, FUN = function(x){x-pxy_out})
tab[,c(i,j)][1,]
tab[,c(i,j)][1,] - pxy_out
tab[,c(i,j)][1,]
pxy_out
(tab[,c(i,j)][1,] - pxy_out)
(tab[,c(i,j)][1,] - pxy_out)^2
sum((tab[,c(i,j)][1,] - pxy_out)^2)
res <- apply(tab[,c(i,j)], MARGIN = 1, FUN = function(x){sum((x-pxy_out)^2)})
res
which(res<1e-5)
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
res <- apply(tab[,c(i,j)], MARGIN = 1, FUN = function(x){sum((x-pxy_out)^2)})
outl <- which(res<1e-5)
out_count <- countries[outl]
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
outl
countries[outl]
as.character(countries[outl])
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
res <- apply(tab[,c(i,j)], MARGIN = 1, FUN = function(x){sum((x-pxy_out)^2)})
outl <- which(res<1e-5)
out_count <- as.character(countries[outl])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NA'))
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
res <- apply(tab[,c(i,j)], MARGIN = 1, FUN = function(x){sum((x-pxy_out)^2)})
outl <- which(res<1e-5)
out_count <- as.character(countries[outl])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NaN'))
}
}
}
outliers
#find the outliers according to bagplot
col_names <- colnames(tab)
outliers <- NULL
for(i in 1:4){
for(j in (i+1):5){
pxy_out <- bagplot(tab[,c(i,j)], create.plot = F)$pxy.outlier
if(!is.null(pxy_out)){
res <- apply(tab[,c(i,j)], MARGIN = 1, FUN = function(x){sum((x-pxy_out)^2)})
outl <- which(res<1e-4)
out_count <- as.character(countries[outl])
outliers <- rbind(outliers, cbind(col_names[i], col_names[j],out_count))
}else{
outliers <- rbind(outliers, cbind(col_names[i], col_names[j], 'NaN'))
}
}
}
outliers
x11()
bagplot.pairs(tab)
