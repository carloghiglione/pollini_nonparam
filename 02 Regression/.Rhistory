library(ISLR2)
library(car)
## --------------------------------------------------------------------------------------------------------------
data(Wage)
wage <- Wage$wage
age <- Wage$age
plot(age, wage)
## --------------------------------------------------------------------------------------------------------------
m_linear=lm(wage ~ age)
summary(m_linear)
age.grid=seq(range(age)[1],range(age)[2],by=0.5)
preds=predict(m_linear,list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
X <- cbind(1,age)
N <- nrow(X)
beta_manual <- c(solve(crossprod(X), crossprod(X, wage)))
res_manual <- c(X%*%beta_manual)-wage
Cov_beta <- sum(res_manual^2)/(N-2)*solve(crossprod(X))
X_grid <- cbind(1,age.grid)
preds_manual_fit <- c(X_grid%*%beta_manual)
preds_manual_fit_se <- sqrt(sapply(1:nrow(X_grid), function(i) t(X_grid[i,])%*%Cov_beta%*%X_grid[i,]))
## --------------------------------------------------------------------------------------------------------------
m_quad=lm(wage ~ age + I(age^2))
summary(m_quad)
preds=predict(m_quad,list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Quadratic Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
## Higher order polynomial regression --------------------------------------------------------------
m_list=lapply(1:10,function(degree){lm(wage ~ poly(age,degree=degree))}) #poly(x, d) does polys of degree d with x
do.call(anova,m_list)
## --------------------------------------------------------------------------------------------------------------
m_list_raw=lapply(1:10,function(degree){lm(wage ~ poly(age,degree=degree,raw=T))})
do.call(what = anova,args = m_list)
x <- Wage$age
ort_poly <- poly(x,degree=2)
x <- Wage$age
ort_poly <- poly(x,degree=2)
# First manual orthogonal polynomial: x is centered and rescaled as to have unit length
manual_poly_1 <- (x-mean(x))/sqrt(sum((x-mean(x))^2))
all(abs(ort_poly[,1]-manual_poly_1)<1e16)
manual_poly_lm_2 <- lm(x^2~manual_poly_1)
manual_poly_2 <- manual_poly_lm_2$residuals/sqrt(sum(manual_poly_lm_2$residuals^2))
all(abs(ort_poly[,2]-manual_poly_2)<1e16)
## check summaries------------------------------------------------------------------------------------------
summary(m_list[[5]])
summary(m_list[[4]])
summary(m_list[[3]])
## check summaries--------------------------------------------------------------------------------------------------------------
summary(m_list_raw[[5]])
summary(m_list_raw[[4]])
summary(m_list_raw[[3]])
## --------------------------------------------------------------------------------------------------------------
plot(m_list[[4]])
## do prediction with polynomial model ----------------------------------------------------------------------
preds=predict(m_list[[4]],list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Degree 4 Poly - Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
preds=predict(m_list[[10]],list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Degree 10 Poly - Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
## logit model----------------------------------------------------------------------------------
m_list_logit=lapply(1:5,function(degree){glm(I(wage>250) ~ poly(age,degree=degree),family='binomial')})
do.call(what = anova, c(list(test="Chisq"), m_list_logit))
## --------------------------------------------------------------------------------------------------------------
preds=predict(m_list_logit[[4]],list(age=age.grid),se=T)
pfit=exp(preds$fit )/(1+ exp( preds$fit ))
se.bands.logit = cbind(preds$fit +2* preds$se.fit , preds$fit -2*
preds$se.fit)
se.bands = exp(se.bands.logit)/(1+ exp(se.bands.logit))
plot(age ,I(wage >250) ,xlim=range(age.grid) ,type ="n",ylim=c(0 ,.2) )
points (jitter (age), I((wage >250) /5) ,cex =.5, pch ="|",
col =" darkgrey ", main='Poly 4 Fit - Logistic')
lines(age.grid ,pfit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
#################################################################à
## --------------------------------------------------------------------------------------------------------------
with(Prestige,plot(income,prestige))
## do linear regression----------------------------------------------------------------------------------
with(Prestige,plot(income,prestige))
abline(lm(prestige~income, data=Prestige))
## --------------------------------------------------------------------------------------------------------------
head(Prestige$income)
head(with(Prestige, cut(income,breaks = c(min(income),10000,max(income)))))
## ----------------------------------------------------------------------
head(Prestige$income)
## I factorize the x in bins------------------------------------------
head(Prestige$income)
head(with(Prestige, cut(income,breaks = c(min(income),10000,max(income)))))
## do step regression --------------------------------------------------------------------------------------------------------------
m_cut=lm(prestige ~ cut(income,breaks = c(min(income),10000,max(income))), data=Prestige)
m_cut=lm(prestige ~ cut(income,breaks = c(min(income),10000,max(income))), data=Prestige)    # R already knows
broom::tidy(summary(m_cut)) %>%
dplyr::mutate(term=ifelse(term=="(Intercept)",term, "income_cut(1e+04,2.59e+04]")) # all this mess to have a nice name on the summary table
m_cut=lm(prestige ~ cut(income,breaks = c(min(income),10000,max(income))), data=Prestige)    # R already knows
broom::tidy(summary(m_cut)) %>%
dplyr::mutate(term=ifelse(term=="(Intercept)",term, "income_cut(1e+04,2.59e+04]")) # all this mess to have a nice name on the summary table
## --------------------------------------------------------------------------------------------------------------
income.grid=with(Prestige, seq(range(income)[1],range(income)[2],by=10))
preds=predict(m_cut,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Custom cut Fit'))
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines(income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
## step regression with 4 bins--------------------------------------------------------------------------------------
m_cut=lm(prestige ~ cut(income,breaks=4),data = Prestige)
## --------------------------------------------------------------------------------------------------------------
income.grid=with(Prestige, seq(range(income)[1],range(income)[2],by=10))
preds=predict(m_cut,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Custom cut Fit'))
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines(income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
## --------------------------------------------------------------------------------------------------------------
uneven_breaks <- c(seq(0,10000,by=1000),seq(15000,35000,by=10000))
## --------------------------------------------------------------------------------------------------------------
m_cut=lm(prestige ~ cut(income,breaks=uneven_breaks),data = Prestige)
## --------------------------------------------------------------------------------------------------------------
income.grid=with(Prestige, seq(range(income)[1],range(income)[2],by=10))
preds=predict(m_cut,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Custom cut Fit'))
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines(income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
abline(v=uneven_breaks,lty=2)
## --------------------------------------------------------------------------------------------------------------
summary(m_cut)
knitr::purl("NPS-lab11_local_regression_splines")
setwd("C:/Users/carlo/Desktop/Università/Magistrale/Anno02/Nonparametric_Statistics/my_labs_nonparametric_stat/Block III - Nonparametric regression")
knitr::purl("NPS-lab11_local_regression_splines")
setwd("C:/Users/carlo/Desktop/Università/Magistrale/Anno02/Nonparametric_Statistics/my_labs_nonparametric_stat/Block III - Nonparametric regression")
knitr::purl("NPS-lab11_local_regression_splines")
knitr::purl("NPS-lab11_local_regression_splines.Rmd")
knitr::purl("NPS-lab12_gam.Rmd")
knitr::purl("NPS-lab13_surv_analysis.Rmd")
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
ggplot2::theme_set(ggplot2::theme_bw())
## .extracode {
## background-color: lightblue;
## }
##load useful libraries -----------------------------------------------------------------------------
library(ISLR2)
library(car)
library(np)
library(splines)
library(fda)
## ----message=FALSE, warning=FALSE------------------------------------------------------------------------------
m_loc = npreg(prestige ~ income,
ckertype = 'uniform',
bws = 3200, # bandwidth
data = Prestige)
View(m_loc)
## ----message=FALSE, warning=FALSE------------------------------------------------------------------------------
with(Prestige,plot(income,prestige))
income_newdata=data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
# we build the test set
income_newdata = data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
# do prediction on the test set
preds = predict(m_loc,newdata=income_newdata,se=T)
# standard error bands
se.bands = cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(
Prestige,
plot(
income ,
prestige ,
xlim = range(income_newdata$income) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws3200 - Uniform kernel'
)
)
lines(income_newdata$income,preds$fit ,lwd =2, col =" blue")
matlines(income_newdata$income,se.bands ,lwd =1, col =" blue",lty =3)
# separately (instead of doing a for loop for each element of the vector inside the function)
loc_pred_unif_manual <- Vectorize(function(x_0, bw) {
ind_unit_in_bw <-
which(Prestige$income > (x_0 - bw) & Prestige$income < (x_0 + bw))
Prestige %>%
dplyr::slice(ind_unit_in_bw) %>%
dplyr::summarise(mean(prestige)) %>%
dplyr::pull()
}, vectorize.args = "x_0")
preds <- predict(m_loc, newdata=data.frame(income=Prestige$income))
all(dplyr::near(preds, loc_pred_unif_manual(x_0 = Prestige$income,bw = 3200), tol = 1e-13))
## try lower bandwith ---------------------------------------------------------------------------
m_loc = npreg(prestige ~ income,
ckertype = 'uniform',
bws = 1000, # bandwidth
data = Prestige)
income_newdata=data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
preds=predict(m_loc,newdata=income_newdata,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(
Prestige,
plot(
income ,
prestige ,
xlim = range(income_newdata$income) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws1000 - Uniform kernel'
)
)
lines(income_newdata$income,preds$fit ,lwd =2, col =" blue")
matlines(income_newdata$income,se.bands ,lwd =1, col =" blue",lty =3)
m_loc = npreg(prestige ~ income,
ckertype = 'uniform',
bws = 5000, # bandwidth
data = Prestige)
income_newdata=data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
preds=predict(m_loc,newdata=income_newdata,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(
Prestige,
plot(
income ,
prestige ,
xlim = range(income_newdata$income) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws5000 - Uniform kernel'
)
)
lines(income_newdata$income,preds$fit ,lwd =2, col =" blue")
matlines(income_newdata$income,se.bands ,lwd =1, col =" blue",lty =3)
## use gaussian kernel------------------------------------------------------------------------
m_loc = npreg(prestige ~ income,
ckertype = 'gaussian',
bws = 3200, # bandwidth
data = Prestige)
income_newdata=data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
preds=predict(m_loc,newdata=income_newdata,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(
Prestige,
plot(
income ,
prestige ,
xlim = range(income_newdata$income) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws3200 - Gaussian kernel'
)
)
lines(income_newdata$income,preds$fit ,lwd =2, col =" blue")
matlines(income_newdata$income,se.bands ,lwd =1, col =" blue",lty =3)
## decrease the kernel -----------------------------------------------------------------------------
m_loc = npreg(prestige ~ income,
ckertype = 'gaussian',
bws = 1000, # bandwidth
data = Prestige)
income_newdata=data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
preds=predict(m_loc,newdata=income_newdata,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(
Prestige,
plot(
income ,
prestige ,
xlim = range(income_newdata$income) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws1000 - Gaussian kernel'
)
)
lines(income_newdata$income,preds$fit ,lwd =2, col =" blue")
matlines(income_newdata$income,se.bands ,lwd =1, col =" blue",lty =3)
## large bandwith ------------------------------------------------------------------------
m_loc = npreg(prestige ~ income,
ckertype = 'gaussian',
bws = 5000, # bandwidth
data = Prestige)
income_newdata=data.frame(income=with(Prestige, seq(range(income)[1],range(income)[2],by=0.5)))
preds=predict(m_loc,newdata=income_newdata,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(
Prestige,
plot(
income ,
prestige ,
xlim = range(income_newdata$income) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws5000 - Gaussian kernel'
)
)
lines(income_newdata$income,preds$fit ,lwd =2, col =" blue")
matlines(income_newdata$income,se.bands ,lwd =1, col =" blue",lty =3)
# I build two models for income > cutoff and income < cutoff
cutoff <- 10000
Prestige$income_cut <- Prestige$income>cutoff
Prestige$income_cut_model <- (Prestige$income-cutoff)*Prestige$income_cut
income_cut_model
Prestige$income_cut_model <- (Prestige$income-cutoff)*Prestige$income_cut
Prestige$income_cut_model
Prestige$income
model_cut=lm(prestige ~ income + income_cut_model, data=Prestige)
new_data <-
with(Prestige, data.frame(
income = seq(range(income)[1], range(income)[2], by = 0.5)
))
new_data$income_cut_model = (new_data$income - cutoff) * (new_data$income > cutoff)
preds_cut=predict(model_cut,new_data ,se=T)
se.bands_cut=cbind(preds_cut$fit +2* preds_cut$se.fit ,preds_cut$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds_cut$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands_cut ,lwd =1, col =" blue",lty =3)
## discontinuous -------------------------------------------------------------------------------
model_cut_disc=lm(prestige ~ income + income_cut_model + I(income>cutoff), data=Prestige)
preds=predict(model_cut_disc,new_data ,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
model_cut_quad <- lm(prestige ~ poly(income,degree = 2) + income_cut_model + I(income>cutoff),  data=Prestige)
preds=predict(model_cut_quad,new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
## --------------------------------------------------------------------------------------------------------------
model_linear_spline <- lm(prestige ~ bs(income, knots=10000,degree=1), data=Prestige)
preds=predict(model_linear_spline,new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
## --------------------------------------------------------------------------------------------------------------
head(unname(model.matrix(model_linear_spline)))
## use linear splines automatically ------------------------------------------------------------------
model_linear_spline <- lm(prestige ~ bs(income, knots=10000,degree=1), data=Prestige)
preds=predict(model_linear_spline,new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
## --------------------------------------------------------------------------------------------------------------
rbind(model_cut=coef(model_cut),
model_linear_spline=coef(model_linear_spline))
## linear b-splines using different knots ----------------------------------------------------------------------------------------
inc_breaks <- c(seq(0, 10000, by = 2500)[-1], 15000)
model_linear_spline_2 <-
lm(prestige ~ bs(income, knots = inc_breaks, degree = 1), data = Prestige)
preds=predict(model_linear_spline_2, new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
inc_breaks
## quadratic splines ---------------------------------------------------------------------------
model_quad_splines <-
lm(prestige ~ bs(income, knots = inc_breaks, degree = 2), data = Prestige)
preds=predict(model_quad_splines, new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
## cubic splines, the best -------------------------------------------------------------------------
model_cubic_splines <-
lm(prestige ~ bs(income, knots = inc_breaks, degree = 3), data = Prestige)
preds=predict(model_cubic_splines, new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
## here I specify the number of degrees of freedom (df) (total number of params) we want
# for splines df = number of knots + degree
# this command sets the knots at uniform quantiles (0.20, 0.40, 0.60, 0.80 qualìntiles of X if 4 knots) of the X variable ------------------------------------------------------------------------------------
model_cubic_splines_2 <-
lm(prestige ~ bs(income, degree = 3,df = 7), data = Prestige)
preds=predict(model_cubic_splines_2, new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
knots <- attr(bs(Prestige$income, degree=3,df=7),'knots')
knots_pred=predict(model_cubic_splines_2,list(income=knots))
points(knots,knots_pred, col='blue',pch=19)
abline(v = knots, lty=3)
## visualize basis function  -------------------------------------------------------------------------
splines_grid <- seq(0, 1, by=0.001)
lin_spline <- bs(splines_grid, df=7, degree = 1)
quad_spline <- bs(splines_grid, df=8, degree = 2)
cub_spline <- bs(splines_grid, df=9, degree = 3)
knots_splines <- attributes(lin_spline)$knots
par(mfrow=c(3,1))
plot(lin_spline[,1]~splines_grid, ylim=c(0,max(lin_spline)), type='l', lwd=2, col=1,
xlab="", ylab="", main="Linear B-spline basis")
for (j in 2:ncol(lin_spline)) lines(lin_spline[,j]~splines_grid, lwd=2, col=j)
points(knots_splines,rep(0,length(knots_splines)),pch=19)
abline(v = knots_splines,lty=3)
## visualize basis function  -------------------------------------------------------------------------
splines_grid <- seq(0, 1, by=0.001)
lin_spline <- bs(splines_grid, df=7, degree = 1)
quad_spline <- bs(splines_grid, df=8, degree = 2)
cub_spline <- bs(splines_grid, df=9, degree = 3)
knots_splines <- attributes(lin_spline)$knots
par(mfrow=c(3,1))
plot(lin_spline[,1]~splines_grid, ylim=c(0,max(lin_spline)), type='l', lwd=2, col=1,
xlab="", ylab="", main="Linear B-spline basis")
for (j in 2:ncol(lin_spline)) lines(lin_spline[,j]~splines_grid, lwd=2, col=j)
points(knots_splines,rep(0,length(knots_splines)),pch=19)
abline(v = knots_splines,lty=3)
plot(quad_spline[,1]~splines_grid, ylim=c(0,max(quad_spline)), type='l', lwd=2, col=1,
xlab="", ylab="", main="Quadratic B-spline basis")
for (j in 2:ncol(quad_spline)) lines(quad_spline[,j]~splines_grid, lwd=2, col=j)
points(knots_splines,rep(0,length(knots_splines)),pch=19)
abline(v = knots_splines,lty=3)
plot(cub_spline[,1]~splines_grid, ylim=c(0,max(cub_spline)), type='l', lwd=2, col=1,
xlab="", ylab="", main="Cubic B-spline basis")
for (j in 2:ncol(cub_spline)) lines(cub_spline[,j]~splines_grid, lwd=2, col=j)
points(knots_splines,rep(0,length(knots_splines)),pch=19)
abline(v = knots_splines,lty=3)
## CHECK THE TWO BASIS FUNCTION SPAN THE SAME SPACE -------------------------------------------------------------
# Define trunc power basis
M <- 4 # cubic spline
X_powers <- poly(Prestige$income,degree = (M-1),raw = TRUE)
X_trunc_powers <- sapply(knots, function(k) (Prestige$income-k)^(M-1)*(Prestige$income>k))
X_manual_cubic_splines <- cbind(X_powers, X_trunc_powers)
# Fit the model with OLS
model_cubic_splines_2_manual <- lm(Prestige$prestige ~ X_manual_cubic_splines)
# Construct the new_data_manual object
new_data_manual_powers <- poly(new_data[,1],degree = 3,raw = TRUE)
new_data_manual_trunc_powers <- sapply(knots, function(k) (new_data[,1]-k)^3*(new_data[,1]>k))
new_data_manual <- cbind(new_data_manual_powers, new_data_manual_trunc_powers)
# Make predictions
preds_manual_cubic_splines <- c(cbind(1,new_data_manual)%*%model_cubic_splines_2_manual$coefficients)
# Compare with the previous solution
all(dplyr::near(preds$fit,preds_manual_cubic_splines))
## --------------------------------------------------------------------------------------------------------------
knots <- quantile(Prestige$income,probs=c(0.1,0.5,0.9))
boundary_knots <- quantile(Prestige$income,probs=c(0.05,0.95))
model_ns=lm(prestige ~ ns(income,knots=knots,Boundary.knots=boundary_knots), data=Prestige) #defaults to three knots
preds=predict(model_ns, new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
knots_pred=predict(model_ns,list(income=knots))
points(knots,knots_pred, col='blue',pch=19)
boundary_pred <- predict(model_ns,list(income=boundary_knots))
points(boundary_knots,boundary_pred,col='red',pch=19)
abline(v = knots, lty=3, col="blue")
abline(v = boundary_knots, lty=3, col="red")
#################################################
# NATURAL CUBIC SPLINES
# FORCE THE ESTIMATE AT THE BOUNDARIES OF X TO BE LINEAR ---------------------------------------------
knots <- quantile(Prestige$income,probs=c(0.1,0.5,0.9))
boundary_knots <- quantile(Prestige$income,probs=c(0.05,0.95))
model_ns=lm(prestige ~ ns(income,knots=knots,Boundary.knots=boundary_knots), data=Prestige) #defaults to three knots
preds=predict(model_ns, new_data,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(new_data$income) ,cex =.5, col =" darkgrey " ))
lines(new_data$income,preds$fit ,lwd =2, col =" blue")
matlines(new_data$income, se.bands ,lwd =1, col =" blue",lty =3)
knots_pred=predict(model_ns,list(income=knots))
points(knots,knots_pred, col='blue',pch=19)
boundary_pred <- predict(model_ns,list(income=boundary_knots))
points(boundary_knots,boundary_pred,col='red',pch=19)
abline(v = knots, lty=3, col="blue")
abline(v = boundary_knots, lty=3, col="red")
## SMOOTHING SPLINES------------------------------------------------------
data(Wage)
with(Wage, plot(age,wage))
## --------------------------------------------------------------------------------------------------------------
fit_smooth_spline <- with(Prestige, smooth.spline(income,prestige,df=100))
with(Prestige, plot(income ,prestige, cex =.5, col =" darkgrey "))
lines(fit_smooth_spline,col="blue",lwd=2)
## --------------------------------------------------------------------------------------------------------------
fit_smooth_spline <- with(Prestige, smooth.spline(income,prestige,df=20))
with(Prestige, plot(income ,prestige, cex =.5, col =" darkgrey "))
lines(fit_smooth_spline,col="blue",lwd=2)
## I can also direcly set lambda ----------------------------------------------------------------------------------------
fit_smooth_spline <- with(Prestige, smooth.spline(income,prestige,lambda = 1e-1))
with(Prestige, plot(income ,prestige, cex =.5, col =" darkgrey "))
lines(fit_smooth_spline,col="blue",lwd=2)
## --------------------------------------------------------------------------------------------------------------
fit_smooth_spline <- with(Prestige, smooth.spline(income,prestige,lambda = 1e-6))
with(Prestige, plot(income ,prestige, cex =.5, col =" darkgrey "))
lines(fit_smooth_spline,col="blue",lwd=2)
## --------------------------------------------------------------------------------------------------------------
fit_smooth_spline_CV <- with(Prestige, smooth.spline(income,prestige,cv = TRUE))     # classic cross validation to select smooth spline with the best lambda
fit_smooth_spline_GCV <- with(Prestige, smooth.spline(income,prestige,cv = FALSE))   # generalized cross validation error to select smooth spline with the best lambda
with(Prestige, plot(income ,prestige, cex =.5, col =" darkgrey "))
lines(fit_smooth_spline,col="red",lwd=2,lty=1)
lines(fit_smooth_spline_GCV,col="blue",lwd=2, lty=2)
legend(20000, 30, legend=c("CV", "GCV"),
col=c("red", "blue"), lty=1:2, cex=0.8)
## --------------------------------------------------------------------------------------------------------------
predict(fit_smooth_spline_GCV,22000)
## --------------------------------------------------------------------------------------------------------------
fit_smooth_spline_CV <- with(Prestige, smooth.spline(income,prestige,cv = TRUE))     # classic cross validation to select smooth spline with the best lambda
fit_smooth_spline_GCV <- with(Prestige, smooth.spline(income,prestige,cv = FALSE))   # generalized cross validation error to select smooth spline with the best lambda
with(Prestige, plot(income ,prestige, cex =.5, col =" darkgrey "))
lines(fit_smooth_spline_CV,col="red",lwd=2,lty=1)
lines(fit_smooth_spline_GCV,col="blue",lwd=2, lty=2)
legend(20000, 30, legend=c("CV", "GCV"),
col=c("red", "blue"), lty=1:2, cex=0.8)
source('C:/Users/carlo/Desktop/Università/Magistrale/Anno02/Nonparametric_Statistics/Progetto/02 Regression/02_uni_score_regression.R')
setwd("C:/Users/carlo/Desktop/Università/Magistrale/Anno02/Nonparametric_Statistics/Progetto/02 Regression")
source('C:/Users/carlo/Desktop/Università/Magistrale/Anno02/Nonparametric_Statistics/Progetto/02 Regression/02_uni_score_regression.R')
