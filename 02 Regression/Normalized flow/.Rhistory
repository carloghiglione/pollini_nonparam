lty = 2, col = 'red', lwd=2)
# bandwidth
mod.ker$bw
# RMSE
sqrt(mod.ker$MSE)
####################################################################################
# I find RMSE with CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE.ker <- function(curr.bws, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
mod.curr <- npreg(log_flow ~ uni_score, ckertype = 'gaussian', bws=curr.bws, data = curr_data)
RMSE[i] <- sqrt(mean((predict(mod.curr, newdata=curr_miss) - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of bandwidth for search
bws.grid <- seq(0.1, 2.5, by=0.01)
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE.ker", "kfolds"))
RMSE_wrapper <- function(curr.bws){find.RMSE.ker(curr.bws, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(bws.grid, RMSE_wrapper, cl=cl)
# optimal bandwidth and corresponding RMSE
opt.bws <- bws.grid[which.min(all_RMSE)]
opt.bws
min(all_RMSE)
x11()
plot(bws.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs bandwidth')
abline(v=opt.bws, col='red', lwd=2)
#########################################################################################
# KERNEL LOCAL AVERAGING REGRESSION WITH OPTIMAL BANDWIDTH
mod.ker.opt <- npreg(log_flow ~ uni_score, ckertype = 'gaussian', bws=opt.bws)
summary(mod.ker.opt)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.ker.opt, newdata = data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Gaussian kernel regression')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
# RMSE
sqrt(mod.ker.opt$MSE)
graphics.off()
rm(list=ls())
library(car)
library(ISLR2)
library(np)
library(splines)
library(fda)
library(pbapply)
library(parallel)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
log_flow <- log(full_tab$tot_in + full_tab$tot_out)    # in + out
uni_score <- full_tab$uni_score
countries <- full_tab$Country
##################
# visualize results
x11()
plot(uni_score, log_flow, main='Total flow vs Uni Score')
##################################################################################
# MIXED GAUSSIAN KERNEL & KNN LOCAL LINEAR REGRESSION
# NUMBER OF NEIGHBORS SELECTION WITH CROSS-VALIDATION ON AIC
# direcly select number of neighbors
k <- 5
# select span
n <- length(log_flow)
span <- 0.05
k <- as.integer(span*n)
mod.knn <- npreg(log_flow ~ uni_score, bwtype='adaptive_nn', bwmethod="cv.aic", ckertype = 'gaussian')
summary(mod.knn)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.knn, newdata = data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Gaussian Kernel - KNN regression, AIC')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
# number of neighbors
mod.knn$bw
# RMSE
sqrt(mod.knn$MSE)
############################################################################################
# I find RMSE and optimal span with CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE.knn <- function(curr.bws, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
mod.curr <- npreg(log_flow ~ uni_score, bwtype='adaptive_nn', ckertype = 'gaussian', bws=curr.bws, data = curr_data)
RMSE[i] <- sqrt(mean((predict(mod.curr, newdata=curr_miss) - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of nearest neighbors search
neigh.grid <- seq(1, ceiling(n/2), by=1)
span.grid <- neigh.grid/n
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE.knn", "kfolds"))
RMSE_wrapper <- function(curr.bws){find.RMSE.knn(curr.bws, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(neigh.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.neigh <- neigh.grid[which.min(all_RMSE)]
opt.neigh
opt.span <- opt.neigh/n
opt.span
min(all_RMSE)
x11()
plot(span.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs span')
abline(v=opt.span, col='red', lwd=2)
#########################################################################################
# MIXED GAUSSIAN KERNEL & KNN LOCAL LINEAR REGRESSION WITH OPTIMAL NUMBER OF NEIGHBORS
mod.knn.opt <- npreg(log_flow ~ uni_score, ckertype = 'gaussian', bws=opt.neigh, bwtype='adaptive_nn')
summary(mod.knn)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.knn.opt, newdata = data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Gaussian kernel - KNN regression')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
# RMSE
sqrt(mod.knn.opt$MSE)
graphics.off()
# RMSE
sqrt(mod.knn.opt$MSE)
min(all_RMSE)
# RMSE
sqrt(mod.knn$MSE)
rm(list=ls())
library(car)
library(ISLR2)
library(np)
library(splines)
library(fda)
library(pbapply)
library(parallel)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
log_flow <- log(full_tab$tot_in + full_tab$tot_out)    # in + out
uni_score <- full_tab$uni_score
countries <- full_tab$Country
##################
# visualize results
x11()
plot(uni_score, log_flow, main='Total flow vs Uni Score')
#######################################################################################
# CUBIC B-SPLINES (ORDER = 3), SET THE DEGREES OF FREEDOM
# KNOTS ARE PLACED AT THE CENTRAL (DOF - ORDER) EVEN QUANTILES (EXCLUDING 0% AND 100%)
# find optimal dof with AIC
# order of splines
order.s <- 3
# set the grid of dof search (knots = dof - orders)
dof.grid <- seq(4, 20, by=1)
# function to find AIC for a certain bandwidth
find.AIC <- function(curr.dof){
mod.curr <- lm(log_flow ~ bs(uni_score, df=curr.dof, degree=order.s))
return(extractAIC(mod.curr)[2])
}
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("log_flow", "uni_score","find.AIC", "bs", "order.s"))
AIC_wrapper <- function(curr.dof){find.AIC(curr.dof)}
# find AIC for all grid points with parallel computing
all_AIC <- pbsapply(dof.grid, AIC_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.dof.AIC <- dof.grid[which.min(all_AIC)]
opt.dof.AIC
min(all_AIC)
x11()
plot(dof.grid, all_AIC, type ='l', lwd='2', main='AIC vs dof')
abline(v=opt.dof.AIC, col='red', lwd=2)
mod.spline.3.opt.AIC <- lm(log_flow ~ bs(uni_score, df=opt.dof.AIC, degree=order.s))
summary(mod.spline.3.opt.AIC)
# extract the knots
used.knots <- attributes(bs(uni_score, df=opt.dof.AIC, degree=order.s))$knots
x11()
par(mfrow=c(2,2))
plot(mod.spline.3.opt.AIC)
shapiro.test(mod.spline.3.opt.AIC$residuals)
# I plot fitted values +- 2 * standard errors)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.spline.3.opt.AIC, data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Cubic splines, optimal AIC')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
abline(v=used.knots, lty=2, col='gray')
RMSE.AIC <- sqrt(mean((mod.spline.3.opt.AIC$residuals)^2))
RMSE.AIC
############################################################################################
# CUBIC B-SPLINES (ORDER = 3), SET THE DEGREES OF FREEDOM
# I find optimal dof with RMSE computed on STRATIFIED K-FOLD CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE <- function(curr.dof, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
mod.curr <- lm(log_flow ~ bs(uni_score, df=curr.dof, degree=3), data = curr_data)
RMSE[i] <- sqrt(mean((predict(mod.curr, newdata=curr_miss) - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of dof search
dof.grid <- seq(4, 20, by=1)
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE", "kfolds", "bs"))
RMSE_wrapper <- function(curr.dof){find.RMSE(curr.dof, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(dof.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.dof <- dof.grid[which.min(all_RMSE)]
opt.dof
min(all_RMSE)
x11()
plot(dof.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs dof')
abline(v=opt.dof, col='red', lwd=2)
#######################################################################################
# CUBIC B-SPLINES (ORDER = 3) WITH OPTIMAL DEGREE OF FREEDOM wrt RMSE
mod.spline.3.opt.RMSE <- lm(log_flow ~ bs(uni_score, df=opt.dof, degree=order.s))
summary(mod.spline.3.opt.RMSE)
# extract the knots
used.knots <- attributes(bs(uni_score, df=opt.dof, degree=order.s))$knots
x11()
par(mfrow=c(2,2))
plot(mod.spline.3.opt.RMSE)
shapiro.test(mod.spline.3.opt.RMSE$residuals)
# I plot fitted values +- 2 * standard errors)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.spline.3.opt.RMSE, data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Cubic splines, optimal RMSE')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
abline(v=used.knots, lty=2, col='gray')
RMSE <- sqrt(mean((mod.spline.3.opt.RMSE$residuals)^2))
RMSE
extractAIC(mod.spline.3.opt.RMSE)
RMSE
min(all_RMSE)
RMSE.AIC
min(all_AIC)
rm(list=ls())
library(car)
library(ISLR2)
library(np)
library(splines)
library(fda)
library(pbapply)
library(parallel)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
log_flow <- log(full_tab$tot_in + full_tab$tot_out)    # in + out
uni_score <- full_tab$uni_score
countries <- full_tab$Country
##################
# visualize results
x11()
plot(uni_score, log_flow, main='Total flow vs Uni Score')
#######################################################################################
# NATURAL CUBIC B-SPLINES
# SET KNOTS ACCORDING TO EVENLY SPACED QUANTILES
# find optimal number of knots with AIC
# set the grid of dof search
knots.grid <- seq(3, 20, by=1)
# function to find AIC for a certain bandwidth
find.AIC <- function(curr.knots){
int.knots <- quantile(uni_score, seq(0, 1, length.out=curr.knots+2))[3:(curr.knots)]
ext.knots <- quantile(uni_score, seq(0, 1, length.out=curr.knots+2))[c(2, curr.knots+1)]
mod.curr <- lm(log_flow ~ ns(uni_score, knots = int.knots, Boundary.knots = ext.knots))
return(extractAIC(mod.curr)[2])
}
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("log_flow", "uni_score","find.AIC", "ns"))
AIC_wrapper <- function(curr.knots){find.AIC(curr.knots)}
# find AIC for all grid points with parallel computing
all_AIC <- pbsapply(knots.grid, AIC_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.knots.AIC <- knots.grid[which.min(all_AIC)]
opt.knots.AIC
min(all_AIC)
x11()
plot(knots.grid, all_AIC, type ='l', lwd='2', main='AIC vs #knots')
abline(v=opt.knots.AIC, col='red', lwd=2)
int.knots <- quantile(uni_score, seq(0, 1, length.out=opt.knots.AIC+2))[3:(opt.knots.AIC)]
ext.knots <- quantile(uni_score, seq(0, 1, length.out=opt.knots.AIC+2))[c(2, opt.knots.AIC+1)]
mod.nat.3.opt.AIC <- lm(log_flow ~ ns(uni_score, knots = int.knots, Boundary.knots = ext.knots))
summary(mod.nat.3.opt.AIC)
x11()
par(mfrow=c(2,2))
plot(mod.nat.3.opt.AIC)
shapiro.test(mod.nat.3.opt.AIC$residuals)
# I plot fitted values +- 2 * standard errors)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.nat.3.opt.AIC, data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Natural Cubic splines, optimal AIC')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
abline(v=c(int.knots, ext.knots), lty=2, col='gray')
RMSE.AIC <- sqrt(mean((mod.nat.3.opt.AIC$residuals)^2))
RMSE.AIC
############################################################################################
# NATURAL CUBIC B-SPLINES
# I find optimal dof with RMSE computed on STRATIFIED K-FOLD CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE <- function(curr.knots, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
int.knots <- quantile(curr_data$uni_score, seq(0, 1, length.out=curr.knots+2))[3:(curr.knots)]
ext.knots <- quantile(curr_data$uni_score, seq(0, 1, length.out=curr.knots+2))[c(2, curr.knots+1)]
mod.curr <- lm(log_flow ~ ns(uni_score, knots = int.knots, Boundary.knots = ext.knots), data = curr_data)
RMSE[i] <- sqrt(mean((predict(mod.curr, newdata=curr_miss) - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of dof search
knots.grid <- seq(3, 20, by=1)
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE", "kfolds", "ns"))
RMSE_wrapper <- function(curr.knots){find.RMSE(curr.knots, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(knots.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.knots.RMSE <- knots.grid[which.min(all_RMSE)]
opt.knots.RMSE
min(all_RMSE)
x11()
plot(knots.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs #knots')
abline(v=opt.knots.RMSE, col='red', lwd=2)
#######################################################################################
# NATURAL CUBIC B-SPLINES WITH OPTIMAL DOF
int.knots <- quantile(uni_score, seq(0, 1, length.out=opt.knots.RMSE+2))[3:(opt.knots)]
ext.knots <- quantile(uni_score, seq(0, 1, length.out=opt.knots.RMSE+2))[c(2, opt.knots+1)]
mod.nat.3.opt.RMSE <- lm(log_flow ~ ns(uni_score, knots = int.knots, Boundary.knots = ext.knots))
summary(mod.nat.3.opt.RMSE)
x11()
par(mfrow=c(2,2))
plot(mod.nat.3.opt.RMSE)
shapiro.test(mod.nat.3.opt.RMSE$residuals)
# I plot fitted values +- 2 * standard errors)
xx <- seq(min(uni_score), max(uni_score), length.out = 1000)
preds <- predict(mod.nat.3.opt.RMSE, data.frame(uni_score = xx), se.fit=T)
x11()
plot(uni_score, log_flow, main = 'Natural Cubic splines, optimal RMSE')
lines(xx, preds$fit, col='red', lwd=2)
matlines(xx, cbind(preds$fit - 2*preds$se.fit , preds$fit + 2*preds$se.fit ),
lty = 2, col = 'red', lwd=2)
abline(v=c(int.knots, ext.knots), lty=2, col='gray')
RMSE <- sqrt(mean((mod.nat.3.opt.RMSE$residuals)^2))
RMSE
extractAIC(mod.nat.3.opt.RMSE)
min(all_RMSE)
RMSE
RMSE.AIC
min(all_AIC)
rm(list=ls())
library(car)
library(ISLR2)
library(np)
library(splines)
library(fda)
library(pbapply)
library(parallel)
full_tab <- read.csv('full_tab_31_10_21.csv')
##################
# creo tabelle con variabili di interesse
log_flow <- log(full_tab$tot_in + full_tab$tot_out)    # in + out
uni_score <- full_tab$uni_score
countries <- full_tab$Country
##################
# visualize results
x11()
plot(uni_score, log_flow, main='Total flow vs Uni Score')
###############################################################
# SMOOTHING CUBIC B-SPLINES (native R function)
# SELECT OPTIMAL LAMBDA WITH CROSS-VALIDATION
fit.s.spline.loocv <- smooth.spline(uni_score, log_flow, cv=T)
fit.s.spline.gcv <- smooth.spline(uni_score, log_flow, cv=F)
x11()
plot(uni_score, log_flow, main = 'Smoothing cubic splines')
lines(fit.s.spline.loocv, col='red', lwd=2)
#lines(fit.s.spline.gcv, col='blue', lwd=2)
legend('bottomright', legend = c('LOOCV', 'GCV'), fill = c('red', 'blue'))
###############################################################
# SMOOTHING CUBIC B-SPLINES
# find optimal number of knots with AIC
# set the grid of dof search
knots.grid <- seq(3, 20, by=1)
# function to find AIC for a certain bandwidth
find.AIC <- function(curr.knots){
my_knots <- quantile(uni_score, seq(0, 1, length.out=curr.knots+2))[2:curr.knots+1]
mod.curr <- ss(uni_score, log_flow, method = 'AIC', knots = my_knots)
return(mod.curr$aic)
}
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("log_flow", "uni_score","find.AIC", "ss"))
AIC_wrapper <- function(curr.knots){find.AIC(curr.knots)}
# find AIC for all grid points with parallel computing
all_AIC <- pbsapply(knots.grid, AIC_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.knots.AIC <- knots.grid[which.min(all_AIC)]
opt.knots.AIC
min(all_AIC)
x11()
plot(knots.grid, all_AIC, type ='l', lwd='2', main='AIC vs #knots')
abline(v=opt.knots.AIC, col='red', lwd=2)
my_knots <- quantile(uni_score, seq(0, 1, length.out=opt.knots.AIC+2))[2:opt.knots.AIC+1]
s.spline.opt.aic <- ss(uni_score, log_flow, method = 'AIC', knots = my_knots)
summary(s.spline.opt.aic)
s.spline.opt.aic$aic
x11()
plot(s.spline.opt.aic)              # plots 95% confidence interval
points(uni_score, log_flow)
abline(v=s.spline.opt.aic$fit$knot, lty=2, col='gray')
RMSE.AIC <- sqrt(mean((predict(s.spline.opt.aic, uni_score)$y - log_flow)^2))
RMSE.AIC
############################################################################################
# I find optimal dof with RMSE computed on STRATIFIED K-FOLD CROSS-VALIDATION
source('quantile_kfold.R')
# define the folds
n_fold <- 5
set.seed(1)
data.fr <- data.frame(log_flow=log_flow, uni_score = uni_score)
kfolds <- quantile_kfold(n_fold, data.fr, 'uni_score')
# function to find RMSE for a certain bandwidth
find.RMSE <- function(curr.lam, n_fold, kfolds){
require(np)
RMSE <- numeric(n_fold)
for(i in 1:n_fold){
curr_data <- kfolds$datasets[[i]]
curr_miss <- kfolds$folds[[i]]
mod.curr <- smooth.spline(curr_data$uni_score, curr_data$log_flow, lambda = curr.lam)
RMSE[i] <- sqrt(mean((predict(mod.curr, curr_miss$uni_score)$y - curr_miss$log_flow)^2))
}
return(mean(RMSE))
}
# set the grid of dof search
lam.grid <- seq(1e-7, 1e-3, by=1e-7)
# define cores for parallel computation
cl <- makeCluster(detectCores())
clusterExport(cl, varlist = list("n_fold", "find.RMSE", "kfolds", "smooth.spline"))
RMSE_wrapper <- function(curr.lam){find.RMSE(curr.lam, n_fold, kfolds)}
# find RMSE for all grid points with parallel computing
all_RMSE <- pbsapply(lam.grid, RMSE_wrapper, cl=cl)
# optimal number of neighbors, span and corresponding RMSE
opt.lam <- lam.grid[which.min(all_RMSE)]
opt.lam
min(all_RMSE)
x11()
plot(lam.grid, all_RMSE, type ='l', lwd='2', main='Root MSE vs smoothing param')
abline(v=opt.lam, col='red', lwd=2)
#######################################################################################
# SMOOTHING CUBIC B-SPLINES WITH OPTIMAL LAMBDA
fit.smooth.opt <- smooth.spline(uni_score, log_flow, lambda = opt.lam)
x11()
plot(uni_score, log_flow, main = 'Smoothing cubic splines')
lines(fit.smooth.opt, col='red', lwd=2)
points(fit.smooth.opt$x, fit.smooth.opt$y, pch='x', col='blue')
RMSE <- sqrt(mean((predict(fit.smooth.opt, uni_score)$y- log_flow)^2))
RMSE
min(all_RMSE)
RMSE.AIC
min(all_AIC)
